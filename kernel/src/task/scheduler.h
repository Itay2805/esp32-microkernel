#pragma once

#include "task.h"

#define CPU_COUNT 2

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Control scheduling
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Put a task into a ready state
 *
 * @param task    [IN]
 */
void scheduler_ready_task(task_t* task);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Preemption stuff
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Disable preemption, nestable
 */
void scheduler_preempt_disable(void);

/**
 * Enable preemption, nestable
 */
void scheduler_preempt_enable(void);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Callbacks from interrupts to the scheduler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void scheduler_on_schedule(task_regs_t* ctx);

void scheduler_on_park(task_regs_t* ctx);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Call the scheduler to do stuff
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Request the scheduler to yield from our thread, passing our time-slice to the caller,
 * putting us at the CPU's local run-queue
 */
void scheduler_yield();

/**
 * Park the current thread, putting us into sleep and not putting us to the run-queue
 */
void scheduler_park(void(*callback)(void* arg), void* arg);

/**
 * Drop the current thread and schedule a new one instead
 */
void scheduler_drop_current();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Get the current running thread
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Get the currently running task on the current CPU
 */
task_t* get_current_task();
